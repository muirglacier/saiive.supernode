# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main
- develop

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'cdbc353a-a9c3-4275-a70d-a5fa4f446df6'
  imageRepository: 'supernode'
  containerRegistry: 'tritonwallet.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  Parameters.RestoreBuildProjects: '**/Saiive.Supernode.sln'
  BuildConfiguration: 'Release'
  Parameters.AzureFunction: 'src/Saiive.SuperNode.Function/Saiive.SuperNode.Function.csproj'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
    
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    addImageTags: |
      beta
  # add docker image tags for builds triggered for tag branch (we assume that we only tag on master)
  # (used instead of trigger for master branch: see https://tributech.atlassian.net/wiki/spaces/TM/pages/99614725/Branches+Build-Pipelines+Tags#Issue-with-merge%2Fbuild-for-master-branch)
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags') }}:
    addImageTags: |
      beta
      
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    addImageTags: |
      beta
      stable
      latest
      
  # add docker image tags for builds triggered from release branch
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release') }}:
    addImageTags: |
      beta
      $(RELEASE_VERSION)

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: BuildAndPublish
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      submodules: true
      persistCredentials: true
    - script: |
        VERSION=$(echo "$(Build.SourceBranch)" | grep -o '[0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?')
        echo "##vso[task.setvariable variable=RELEASE_VERSION;]$VERSION"
        echo $VERSION
      
    displayName: 'Parse and set release version'
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release'), startsWith(variables['Build.SourceBranch'], 'refs/tags'), startsWith(variables['Build.SourceBranch'], 'refs/heads/main'))
    
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          alpha
          ${{ variables.addImageTags }}

- stage: BuildAzureFunction
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
      
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '$(Parameters.RestoreBuildProjects)'
        includeNuGetOrg: true

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '$(Parameters.RestoreBuildProjects)'
        arguments: '--configuration $(BuildConfiguration)'


- stage: PackAzureFunction
  displayName: Pack and archive azure functions
  dependsOn: BuildAzureFunction
  condition: succeeded()

  jobs:
  - job: Publish
    displayName: 00 Publish azure function
    pool:
      vmImage: $(vmImageName)

    steps:

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '$(Parameters.RestoreBuildProjects)'
        includeNuGetOrg: true
        
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
          command: publish
          projects: '$(Parameters.AzureFunction)'
          arguments: '-o $(Build.ArtifactStagingDirectory)/function'
          zipAfterPublish: true
          modifyOutputPath: false
          publishWebProjects: false
        
   
    - task: Bash@3
      displayName: Rename file
      inputs:
          targetType: 'inline'
          workingDirectory: $(Build.ArtifactStagingDirectory)/function
          script: 'mv function.zip $(Build.BuildNumber)-function.zip'
    
    - task: PublishBuildArtifacts@1
      inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'AzureFunctions'
          publishLocation: 'Container'


- stage: PackageTerraform
  displayName: Pack terraform
  dependsOn: BuildAzureFunction

  jobs:
  - job: Pack
    displayName: Pack terraform
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: CopyFiles@2
      inputs:
          SourceFolder: '$(Build.SourcesDirectory)/terraform_func'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          CleanTargetFolder: true
          OverWrite: true

    - task: PublishBuildArtifacts@1
      inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'terraform'
          publishLocation: 'Container'